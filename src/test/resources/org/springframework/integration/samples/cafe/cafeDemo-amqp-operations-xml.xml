<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:stream="http://www.springframework.org/schema/integration/stream"
	xmlns:cloud="http://schema.cloudfoundry.org/spring"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp-2.2.xsd
		http://schema.cloudfoundry.org/spring http://schema.cloudfoundry.org/spring/cloudfoundry-spring-0.8.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-2.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
		http://www.springframework.org/schema/integration/stream http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- rabbit connection factory, rabbit template, and rabbit admin -->
	<import resource="classpath:org/springframework/integration/samples/cafe/cafeDemo-amqp-config-xml.xml" />

    <!--  To receive AMQP Messages from a Queue, configure an inbound-channel-adapter  -->
    
	<int-amqp:inbound-gateway 
		id="newCafeOrders"
		request-channel="jsonOrders"
		queue-names="new-orders" 
		connection-factory="rabbitConnectionFactory" 
		receive-timeout="60000"/>
		
	<int:chain input-channel="jsonOrders" >
		<int:json-to-object-transformer type="org.springframework.integration.samples.cafe.Order" />

		<int:splitter expression="payload.items" apply-sequence="true"/>

		<int:header-enricher>
			<int:header name="ICED" expression="payload.isIced()"/>
		</int:header-enricher>
		
		<int:object-to-json-transformer />
	
		<int:router expression="headers.ICED ? 'coldDrinks' : 'hotDrinks'"/>
	</int:chain>
	
    <!-- To send AMQP Messages to an Exchange and receive back a response from a remote client, configure an outbound-gateway -->	
	<int-amqp:outbound-gateway 
		id="coldDrinksBarista" 
		request-channel="coldDrinks"
		exchange-name="cafe-drinks"
		reply-channel="preparedJsonDrinks"
		routing-key="drink.cold"
		amqp-template="coldDrinkTemplate"/>

    <!-- To send AMQP Messages to an Exchange and receive back a response from a remote client, configure an outbound-gateway -->	
	<int-amqp:outbound-gateway 
		id="hotDrinksBarista" 
		request-channel="hotDrinks"
		reply-channel="preparedJsonDrinks" 
		exchange-name="cafe-drinks"
		routing-key="drink.hot"
		amqp-template="hotDrinkTemplate" />

	<int:chain input-channel="preparedJsonDrinks" >
		<int:json-to-object-transformer type="org.springframework.integration.samples.cafe.Drink"/>
	
<!-- 	    <int:aggregator method="prepareDelivery" message-store="gemfireMessageStore"> -->
	    <int:aggregator method="prepareDelivery">
	    	<bean class="org.springframework.integration.samples.cafe.xml.Waiter"/>
	    </int:aggregator>
	
		<int:header-enricher>
			<int:header name="NUMBER" expression="payload.getOrderNumber()" />
		</int:header-enricher>
	
		<int:object-to-json-transformer />
	</int:chain>

    <rabbit:template id="coldDrinkTemplate"
		connection-factory="rabbitConnectionFactory" 
		reply-queue="cold-drink-replies"
		reply-timeout="60000">
		<rabbit:reply-listener />
	</rabbit:template>
	
	<rabbit:template id="hotDrinkTemplate" 
    	connection-factory="rabbitConnectionFactory" 
		reply-queue="hot-drink-replies"
    	reply-timeout="60000">
    	<rabbit:reply-listener/>
    </rabbit:template>
    
    
<!--     <bean id="gemfireMessageStore" class="org.springframework.integration.gemfire.store.GemfireMessageStore"> -->
<!-- 		<constructor-arg ref="myCache"/> -->
<!-- 	</bean> -->
	
<!-- 	<bean id="myCache" class="org.springframework.data.gemfire.CacheFactoryBean"/> -->

</beans>